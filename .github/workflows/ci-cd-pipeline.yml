# Name of your workflow
name: CI/CD Pipeline

# When this workflow will be triggered
on:
  push:
    branches:
      - master # Triggers on pushes to the master branch

# A workflow run is made up of one or more jobs.
jobs:
  # The 'build' job to compile your code and create the JAR artifact
  build:
    # Run the job on the latest version of Ubuntu
    runs-on: ubuntu-latest

    # Steps for the build job
    steps:
    # Check out your code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up the specified version of Java
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    # Build the Spring Boot application using Maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Upload the generated JAR file as an artifact for the next job
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: target/*.jar

  # The 'deploy' job to deploy the application to your GCP instance
  deploy:
    # This job needs the 'build' job to complete successfully first
    needs: build
    # Run the job on the latest version of Ubuntu
    runs-on: ubuntu-latest

    # Environment variables for the deployment steps
    env:
      GCP_PROJECT_ID: unique-spirit-469000-h2 # Replace with your GCP project ID
      GCP_INSTANCE_NAME: instance-springboot-app-41082025-0718
      GCP_ZONE: us-central1-c  # Replace with your GCP instance's zone

    # Steps for the deploy job
    steps:
    # Download the JAR artifact from the build job
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-app

    # Authenticate to Google Cloud Platform using a Service Account Key
    # You must store this key as a GitHub Secret with the name 'GCP_SA_KEY'
    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Deploy the application to the GCP instance using SSH
    - name: Deploy to GCP
      uses: google-github-actions/ssh@v1
      with:
        # Use gcloud to get the public IP of your instance
        instance_name: ${{ env.GCP_INSTANCE_NAME }}
        zone: ${{ env.GCP_ZONE }}
        command: |
          # The following assumes your Spring Boot app is running as a systemd service.
          # If not, you might need to find and kill the process.
          echo "Stopping existing service..."
          sudo systemctl stop springboot-app.service || true

          echo "Removing old application jar..."
          sudo rm -f /var/www/app/spring-boot-app.jar

          echo "Transferring new application jar..."
          sudo mv spring-boot-app.jar /var/www/app/

          echo "Starting new service..."
          sudo systemctl start springboot-app.service
		  # Re-triggering pipeline
