# Name of your workflow.
name: CI/CD Pipeline

# This section specifies when the workflow should run.
on:
  push:
    branches:
      - master

# A workflow is made up of one or more jobs.
jobs:
  # The 'build' job is responsible for compiling your Spring Boot application.
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: target/*.jar

  # The 'deploy' job will deploy the artifact from the 'build' job to your GCP instance.
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    env:
      GCP_INSTANCE_NAME: instance-springboot-app-41082025-0718
      GCP_ZONE: us-central1-c
      
    steps:
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-app
    
    # The 'google-github-actions/auth' action is still needed for 'gcloud' commands.
    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Get the external IP address of your GCP instance.
    - name: Get Instance External IP
      id: get_ip
      run: |
        EXTERNAL_IP=$(gcloud compute instances describe ${{ env.GCP_INSTANCE_NAME }} --zone=${{ env.GCP_ZONE }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
    
    # Use the 'appleboy/ssh-action' for reliable deployment.
    - name: Deploy to GCP
      uses: appleboy/ssh-action@v1.0.0
      with:
        # Use the username you set up for the SSH key on GCP.
        username: pratapsphal
        host: ${{ env.EXTERNAL_IP }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Stopping existing service..."
          sudo systemctl stop springboot-app.service || true

          echo "Removing old application jar..."
          sudo rm -f /var/www/app/spring-boot-app.jar

          echo "Transferring new application jar..."
          sudo mv spring-boot-app.jar /var/www/app/

          echo "Starting new service..."
          sudo systemctl start springboot-app.service
